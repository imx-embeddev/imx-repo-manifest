<?xml version="1.0" encoding="UTF-8"?>
<manifest>
    <!-- 第一部分，指定服务器的信息 -->
    <!-- remote 指定远程仓库的信息，例如github、gitee，这里其实相当于自己的git远程仓库存放的服务器的信息  -->
    <!--    name    标志该仓库的远程名称，与<project>标签中的remote属性需要对应起来。 -->
    <!--    fetch   用于指定远程仓库的路径前缀(注意不包含仓库名)。 -->
    <!--    alias   由于下载代码时是通过远程仓库名remote来确定下载路径前缀的，当有多个remote时，远程仓库名称会不一样，
                    为了保持远程仓库名称相同便于管理，可以通过该变量为仓库取别名。通常name不为origin时,可以将别名取为 origin -->
	<!--    review  指定Git的服务器名，用于repo upload操作。如果没有指定，则repo upload没有效果。通常跟fetch变量保持一致即可。-->

    <!-- 远程服务器1: github上的git@github.com:imx-embeddev -->
    <remote name="origin"
            fetch="git@github.com:imx-embeddev"
            autodotgit="true" /> <!--fetch=".." 代表使用 repo init -u 指定的相对路径 也可用完整路径，example:https://gitee.com/sumumm/manifest/blob/master/default.xml -->

    <!-- 远程服务器2: gitee上的 https://gitee.com/oschina 这是其他人的仓库，当然也可以用 -->
    <remote name="soschina-gitee" 
            fetch="https://gitee.com/oschina"
            alias="origin"
            autodotgit="true" /> <!--fetch=".." 代表使用 repo init -u 指定的相对路径 也可用完整路径，example:https://gitee.com/sumumm/manifest/blob/master/default.xml -->
    
    <!-- 第二部分，设置git clone 的时候默认的来源 -->
    <!-- default 用于指定project标签的默认参数 -->
    <!--    remote    为<project>标签中的remote属性指定默认值, 若之后project中不指定，则默认为default中指定的。 -->
    <!--    revision  指定默认需要获取的git提交点，可以是master, refs/heads/master, tag或者某次提交的哈希字符串值。
                      如果不设置的话，默认下载当前project，默认分支上的最新代码。 -->
    <!--    sync-j    代码同步时线程数 -->
    <default revision="master"
             remote="origin"
             sync-j="4" />
    
    <!-- 第三部分，指定远程和本地仓库名称等信息 -->
    <!-- project 用于指定具体仓库的名称、存储路径，远程仓库名称、分支等单个仓库下载所需的信息。 -->
    <!--    name     仓库的名称，与<remote>标签中指定的fetch远程仓库的路径前缀拼接，形成完整代码下载地址。 -->
    <!--    path     仓库下载下来后代码在本地保存的路径。如果没有指定，则以name作为子目录名。 -->
    <!--    revision 指定代码下载的提交点，可以是分支、tag或某次提交的哈希字符串值。 -->
    <!--    remote   指定远程仓库<remote>标签中的name，从而获取其仓库下载地址前缀。 -->
    
    <!-- git@github.com:imx-embeddev/kernel.git -->
	<project path="kernel-dev" name="kernel"/>  <!--git@github.com:{namespace}/{name}.git name 与 clone 的 url 相关-->
    <!-- git@github.com:imx-embeddev/u-boot.git -->
    <project path="u-boot-dev" name="u-boot" />  <!--git@github.com:{namespace}/{name}.git name 与 clone 的 url 相关-->

    <!-- git@gitee.com:oschina/repo.git 这里是并非默认服务器，所以要用remote指定，可以指定前面remote标签中设置的远程服务器 -->
    <project path="repo-local" name="repo" remote="soschina-gitee" revision="fork_flow"/>  <!--git@gitee.com:{namespace}/{name}.git name 与 clone 的 url 相关-->
    
</manifest>
